apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.sharedServices.namespace }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-sa
  namespace: {{ .Values.sharedServices.namespace }}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::{{ .Values.awsAccountNumber }}:role/{{ .Values.sharedServices.iamRole.name }}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.sharedServices.name }}-s3-pv
  namespace: {{ .Values.sharedServices.namespace }}
spec:
  capacity:
    storage: {{ .Values.global.s3.storage.size }}
  volumeMode: Filesystem
  accessModes:
{{ toYaml .Values.global.s3.storage.accessModes | indent 4 }}
  mountOptions:
    - allow-delete
    - allow-other
    - allow-overwrite
  persistentVolumeReclaimPolicy: {{ .Values.global.s3.storage.reclaimPolicy }}
  storageClassName: {{ .Values.global.s3.storage.storageClassName }}
  csi:
    driver: s3.csi.aws.com
    volumeHandle: s3-csi-{{ .Values.sharedServices.name }}-mount
    volumeAttributes:
      bucketName: {{ .Values.global.s3.bucketName }}
      mounter: s3fs
      authType: "pod"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.sharedServices.name }}-s3-pvc
  namespace: {{ .Values.sharedServices.namespace }}
spec:
  accessModes:
{{ toYaml .Values.global.s3.storage.accessModes | indent 4 }}
  resources:
    requests:
      storage: {{ .Values.global.s3.storage.size }}
  storageClassName: {{ .Values.global.s3.storage.storageClassName }}
  volumeName: {{ .Values.sharedServices.name }}-s3-pv

---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.sharedServices.secretProviderClass.name }}
  namespace: {{ .Values.sharedServices.namespace }}
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: {{ .Values.global.secret.name }}
        objectType: secretsmanager
        jmesPath:
          - path: "jwt_secret"
            objectAlias: "{{ .Values.sharedServices.secret.jwtSecretKey }}"
  secretObjects:
    - secretName: {{ .Values.global.secret.name }}
      type: Opaque
      data:
        - objectName: "{{ .Values.sharedServices.secret.jwtSecretKey }}"
          key: jwt_secret

---
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Values.sharedServices.name }}-pod
  namespace: {{ .Values.sharedServices.namespace }}
spec:
  serviceAccountName: secrets-sa
  restartPolicy: Always
  containers:
    - name: {{ .Values.sharedServices.name }}
      image: {{ .Values.sharedServices.image.repository }}:{{ .Values.sharedServices.image.tag }}
      command: ["/bin/bash", "-c", "--"]
      args: ["while true; do sleep 3600; done;"]
      volumeMounts:
        - name: s3-volume
          mountPath: /s3_mount
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      env:
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.secret.name }}
              key: {{ .Values.sharedServices.secret.jwtSecretKey }}
      resources:
        requests:
          cpu: "{{ .Values.sharedServices.resources.requests.cpu }}"
          memory: "{{ .Values.sharedServices.resources.requests.memory }}"
        limits:
          cpu: "{{ .Values.sharedServices.resources.limits.cpu }}"
          memory: "{{ .Values.sharedServices.resources.limits.memory }}"
  volumes:
    - name: s3-volume
      persistentVolumeClaim:
        claimName: {{ .Values.sharedServices.name }}-s3-pvc
    - name: secrets-store-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: {{ .Values.sharedServices.secretProviderClass.name }}
